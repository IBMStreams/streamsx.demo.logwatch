/*
 * LogWatch
 * Scott Schneider, scott.a.s@us.ibm.com
 * For use with InfoSphere Streams 3.2 and later.
 *
 * For further information, see the README.
 */

namespace com.ibm.streamsx.demo.logwatch.performance;

/* Given a list of strings, produce one string that is the concatenation of 
 * them separated by spaces. */
rstring flatten(list<rstring> lst)
{
    mutable rstring str = "";
    for (rstring e in lst) {
        str += e + " ";
    }
    return str;
}

/* Tuple that represents a suspected breakin. */
type Suspect = timestamp diff, timestamp last, uint32 attempts, rstring rhost, rstring user;

/* For each remote host, look for failure $attempts in a period of $seconds. */
composite SuspectFind(input Failure; output Diff) {
    param
        expression<uint32> $attempts;
        expression<float64> $seconds;

    type FailureRange = timestamp max, timestamp min, rstring rhost, rstring user;

    graph
        stream<FailureRange> Range = Aggregate(Failure) {
            window Failure: tumbling, count($attempts), partitioned;
            param partitionBy: rhost;
            output Range: max = Max(time), min = Min(time), user = Max(user);
        }

        stream<FailureRange> Cutoff = Filter(Range) {
            param filter: max - min < (timestamp)$seconds;
        }

        stream<Suspect> Diff = Functor(Cutoff) {
            output Diff: diff = max - min, last = max, attempts = $attempts;
        }
}

composite LogWatch {
    param expression<rstring> $file: getSubmissionTimeValue("file");

    type
        LogLine = uint64 seqno, timestamp time, rstring hostname, rstring service, rstring message;
        Failure = uint64 seqno, timestamp time, rstring uid, rstring euid, rstring tty, rstring rhost, rstring user;
        Success = uint64 seqno, timestamp time, rstring user; 
        Breakin = timestamp time, rstring rhost, rstring user;

    graph
        stream<int32 go> Init = Beacon() {
            param  iterations: 1u;
            output Init: go = 1;
        }

        (stream<rstring ifile> InFile; stream<timestamp start> Start) = Custom(Init) {
            logic onTuple Init: {
                submit({start = getTimestamp()}, Start);
                submit({ifile = $file}, InFile);
            }
        }

        stream<rstring line> RawLines = FileSource(InFile) {
            param format: line;
                  compression: gzip;
        }

        (stream<uint64 seqno, rstring line> RawLinesFinal; stream<uint64 total> TotalCount) = Custom(RawLines) {
            logic 
            state: {
                mutable uint64 count_ = 0;
            }

            onTuple RawLines: {
                ++count_;
                submit({seqno=count_, line=RawLines.line}, RawLinesFinal);
            }

            onPunct RawLines: {
                if (currentPunct() == Sys.WindowMarker) {
                    submit(Sys.FinalMarker, RawLinesFinal);
                    submit({total = count_}, TotalCount);
                }
                else {
                    submit(currentPunct(), RawLinesFinal);
                }
            }
        }

        // Process the raw log line into a service-agnostic tuple.
        stream<LogLine> ParsedLines = Custom(RawLinesFinal) {
            logic onTuple RawLinesFinal: {
                    list<rstring> tokens = tokenize(line, " ", false);
                    timestamp t = timeStringToTimestamp(tokens[1] + "-" + 
                                                        upper(tokens[0]) + "-2011", 
                                                        tokens[2] + ".000", false);

                    submit({seqno = RawLinesFinal.seqno,
                            time = t, hostname = tokens[3], service = tokens[4], 
                            message = flatten(tokens[5:])}, 
                           ParsedLines);
                }
        }

        // Find all of the sshd authentication failures.
        stream<LogLine> RawFailures = Filter(ParsedLines) {
            param filter: findFirst(service, "sshd", 0) != -1 && 
                          findFirst(message, "authentication failure", 0) != -1;
        }

        // Process the authentication failure messages into tuples.
        stream<Failure> Failures = Custom(RawFailures) {
            logic onTuple RawFailures: {
                    list<rstring> tokens = tokenize(message, ";", false);
                    list<rstring> values = tokenize(tokens[1], "= ", false);

                    submit({seqno = RawFailures.seqno, time = RawFailures.time, uid = values[2], 
                            euid = values[4], tty = values[6], rhost = values[9], 
                            user = size(values) == 12 ? values[11]: ""}, 
                           Failures);
                }
        }

        stream<Suspect> RealTime = SuspectFind(Failures) {
            param attempts: 5u;
                  seconds: 60.0;
        }

        // Find all of the successful logins.
        stream<LogLine> RawSuccesses = Filter(ParsedLines) {
            param filter: findFirst(service, "sshd", 0) != -1 && 
                          findFirst(message, "session opened for user", 0) != -1;
        }

        // Who logged in?
        stream<Success> Successes = Functor(RawSuccesses) {
            output Successes: user = tokenize(regexMatch(message, "user .* by")[0], " ", false)[1];
        }

        stream<Breakin> Breakins = Custom(RealTime; Successes) {
            logic 
            state: {
                mutable map<rstring, list<tuple<RealTime>>> suspects = {};
                mutable map<rstring, list<tuple<Successes>>> logins = {};
            }

            onTuple RealTime: {
                if (RealTime.user in logins) {
                    mutable int32 i = 0;
                    mutable int32 stale = 0;
                    mutable boolean matched = false;
                    while (i < size(logins[RealTime.user])) {
                        float64 diff = diffAsSecs(logins[RealTime.user][i].time, RealTime.last);
                        if (0.0 <= diff && diff <= 60.0) {
                            submit({time = logins[RealTime.user][i].time, 
                                    rhost = RealTime.rhost, 
                                    user = RealTime.user}, 
                                Breakins);
                            removeM(logins[RealTime.user], i);
                            matched = true;
                            stale--;
                            break;
                        }
                        else if (diff > 60.0) {
                            stale = i;
                        }
                        i++;
                    }

                    if (stale > 0) {
                        removeM(logins[RealTime.user], 0, stale);
                    }

                    if (!matched) {
                        if (!(RealTime.user in suspects)) {
                            suspects[RealTime.user] = (list<RealTime>)[];
                        }
                        appendM(suspects[RealTime.user], RealTime);
                    }
                }
                else if (RealTime.user != "") {
                    if (!(RealTime.user in suspects)) {
                        suspects[RealTime.user] = (list<RealTime>)[];
                    }
                    appendM(suspects[RealTime.user], RealTime);
                }
            }

            onTuple Successes: {
                if (Successes.user in suspects) {
                    mutable int32 i = 0;
                    mutable int32 stale = 0;
                    mutable boolean matched = false;
                    while (i < size(suspects[Successes.user])) {
                        float64 diff = diffAsSecs(Successes.time, suspects[Successes.user][i].last); 
                        if (0.0 <= diff && diff <= 60.0) {
                            submit({time = Successes.time, 
                                    rhost = suspects[Successes.user][i].rhost, 
                                    user = Successes.user}, 
                                Breakins);
                            removeM(suspects[Successes.user], i);
                            stale--;
                            matched = true;
                            break;
                        }
                        else if (diff > 60.0) {
                            stale = i;
                        }
                        i++;
                    }

                    if (stale > 0) {
                        removeM(suspects[Successes.user], 0, stale);
                    }

                    if (!matched) {
                        if (!(Successes.user in logins)) {
                            logins[Successes.user] = (list<Successes>)[];
                        }
                        appendM(logins[Successes.user], Successes);
                    }
                }
                else {
                    if (!(Successes.user in logins)) {
                        logins[Successes.user] = (list<Successes>)[];
                    }
                    appendM(logins[Successes.user], Successes);
                }
            }
        }

        () as BreakinsWriter = FileSink(Breakins) {
            param file: "Breakins.txt";
                  format: txt;
        }

        stream<float64 time, uint64 total, float64 throughput> ExecTime = Custom(Start; Breakins; TotalCount) {
            logic
            state: {
                timestamp zero = createTimestamp(0l, 0u);
                mutable timestamp start_ = zero;
                mutable timestamp finish_ = zero;
                mutable uint64 count_ = 0;
            }
            
            onTuple Start: {
                start_ = start;
                if (finish_ != zero && count_ != 0lu) {
                    float64 diff = diffAsSecs(finish_, start_);
                    submit({time = diff, total = count_, throughput = (float64)count_/diff}, ExecTime);
                }
            }

            onTuple TotalCount: {
                count_ = TotalCount.total;
                if (start_ != zero && finish_ != zero) {
                    float64 diff = diffAsSecs(finish_, start_);
                    submit({time = diff, total = count_, throughput = (float64)count_/diff}, ExecTime);
                }
            }

            onPunct Breakins: {
                if (currentPunct() == Sys.FinalMarker) {
                    finish_ = getTimestamp();
                    if (start_ != zero && count_ != 0lu) {
                        float64 diff = diffAsSecs(finish_, start_);
                        submit({time = diff, total = count_, throughput = (float64)count_/diff}, ExecTime);
                    }
                }
            }
        }

        () as ExecTimeWriter = FileSink(ExecTime) {
            param file: "ExecTime.txt";
                  format: txt;
                  flush: 1u;
        }
}
